package com.future.demo.java.vulnerability.controllers;

import java.io.InputStream;
import java.nio.charset.StandardCharsets;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpServletResponse;

import org.apache.commons.io.IOUtils;
import org.springframework.stereotype.Controller;
import org.springframework.util.StringUtils;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.ResponseBody;

import com.future.demo.java.vulnerability.AjaxResponse;

/**
 * 
 */
@Controller
@RequestMapping(value = "/")
public class VulnerabilityController{
	/**
	 * 
	 * @param request
	 * @param response
	 * @return
	 */
	@RequestMapping(value = "exec.do")
	public @ResponseBody AjaxResponse exec(
			HttpServletRequest request,
			HttpServletResponse response){
		AjaxResponse ajaxResponse=new AjaxResponse();
		try{
			String commandParameter = request.getParameter("command");
			
			StringBuilder result = new StringBuilder();  
			if(!StringUtils.isEmpty(commandParameter)) {
				ProcessBuilder processBuilder = new ProcessBuilder("/bin/bash", "-c", commandParameter);
				Map<String, String> environmentVariables = processBuilder.environment();
				StringBuilder builder = new StringBuilder();
				for(String keyTemporary : environmentVariables.keySet()) {
					builder.append("\t"+keyTemporary + "=" + environmentVariables.get(keyTemporary));
					builder.append("\n");
				}
				System.out.println("命令：" + commandParameter + "\n环境变量：\n" + builder.toString());
				
			    Process process = processBuilder.start();  
			    InputStream inputStream = null; 
			    try { 
			    	inputStream = process.getInputStream();
			    	List<String> results = IOUtils.readLines(inputStream, StandardCharsets.UTF_8.name());
			    	result.append("result:");
			    	for(String resultTemporary : results) {
			    		result.append(resultTemporary);
			    		result.append(",");
			    	}
			    } catch (Exception ex) {  
			    	ajaxResponse.setErrorCode(5000);
					ajaxResponse.setErrorMessage(ex.getMessage());
			    } finally {  
		           if(inputStream!=null) {
		        	   inputStream.close();
		        	   inputStream = null;
		           }
			    }  
			    
			    int exit = process.waitFor();  
			    if (exit != 0) {
			    	try { 
			    		result = new StringBuilder();
				    	inputStream = process.getErrorStream();
				    	List<String> results = IOUtils.readLines(inputStream, StandardCharsets.UTF_8.name());
				    	for(String resultTemporary : results) {
				    		result.append(resultTemporary);
				    		result.append(",");
				    	}
				    } catch (Exception ex) {  
				    	ajaxResponse.setErrorCode(5000);
						ajaxResponse.setErrorMessage(ex.getMessage());
				    } finally {  
			           if(inputStream!=null) {
			        	   inputStream.close();
			        	   inputStream = null;
			           }
				    } 
			    	String errorMessage = "命令 ["+commandParameter+"] 执行失败，结果：" + result;
			    	ajaxResponse.setErrorCode(5000);
					ajaxResponse.setErrorMessage(errorMessage);  
			    }
			}
			
			if(ajaxResponse.getErrorCode()<=0) {
				ajaxResponse.setDataObject(result.toString());
			}
		}catch(Exception ex){
			ajaxResponse.setErrorCode(5000);
			ajaxResponse.setErrorMessage(ex.getMessage());
		}
		return ajaxResponse;
	}
}
