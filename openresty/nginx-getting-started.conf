# nginx.conf  --  docker-openresty
#
# This file is installed to:
#   `/usr/local/openresty/nginx/conf/nginx.conf`
# and is the file loaded by nginx at startup,
# unless the user specifies otherwise.
#
# It tracks the upstream OpenResty's `nginx.conf`, but removes the `server`
# section and adds this directive:
#     `include /etc/nginx/conf.d/*.conf;`
#
# The `docker-openresty` file `nginx.vh.default.conf` is copied to
# `/etc/nginx/conf.d/default.conf`.  It contains the `server section
# of the upstream `nginx.conf`.
#
# See https://github.com/openresty/docker-openresty/blob/master/README.md#nginx-config-files
#

#user  nobody;
#worker_processes 1;

# Enables the use of JIT for regular expressions to speed-up their processing.
pcre_jit on;



#error_log  logs/error.log;
#error_log  logs/error.log  notice;
#error_log  logs/error.log  info;

# 开启debug级别日志，否则ngx.log不能输出debug级别日志
# https://stackoverflow.com/questions/55975325/nothing-is-written-to-nginx-access-log-error-log-how-to-troubleshoot
error_log  logs/error.log  debug;

#pid        logs/nginx.pid;


events {
    worker_connections  1024;
}


http {
    include       mime.types;
    default_type  application/octet-stream;

    # Enables or disables the use of underscores in client request header fields.
    # When the use of underscores is disabled, request header fields whose names contain underscores are marked as invalid and become subject to the ignore_invalid_headers directive.
    # underscores_in_headers off;

    #log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
    #                  '$status $body_bytes_sent "$http_referer" '
    #                  '"$http_user_agent" "$http_x_forwarded_for"';

    #access_log  logs/access.log  main;

        # Log in JSON Format
        # log_format nginxlog_json escape=json '{ "timestamp": "$time_iso8601", '
        # '"remote_addr": "$remote_addr", '
        #  '"body_bytes_sent": $body_bytes_sent, '
        #  '"request_time": $request_time, '
        #  '"response_status": $status, '
        #  '"request": "$request", '
        #  '"request_method": "$request_method", '
        #  '"host": "$host",'
        #  '"upstream_addr": "$upstream_addr",'
        #  '"http_x_forwarded_for": "$http_x_forwarded_for",'
        #  '"http_referrer": "$http_referer", '
        #  '"http_user_agent": "$http_user_agent", '
        #  '"http_version": "$server_protocol", '
        #  '"nginx_access": true }';
        # access_log /dev/stdout nginxlog_json;

    # See Move default writable paths to a dedicated directory (#119)
    # https://github.com/openresty/docker-openresty/issues/119
    client_body_temp_path /var/run/openresty/nginx-client-body;
    proxy_temp_path       /var/run/openresty/nginx-proxy;
    fastcgi_temp_path     /var/run/openresty/nginx-fastcgi;
    uwsgi_temp_path       /var/run/openresty/nginx-uwsgi;
    scgi_temp_path        /var/run/openresty/nginx-scgi;

    sendfile        on;
    #tcp_nopush     on;

    #keepalive_timeout  0;
    keepalive_timeout  65;

    #gzip  on;

    # 辅助lua脚本获取客户端真实ip
    proxy_set_header X-Real-IP $remote_addr;
    proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;

    # lua 共享内存api
    # 定义10mb共享内存
    lua_shared_dict sharedDict 10m;

    access_by_lua_block {
    	-- ngx.log 使用
	--
	-- ngx log_level常量
        -- https://openresty-reference.readthedocs.io/en/latest/Lua_Nginx_API/#nginx-log-level-constants 
	ngx.log(ngx.DEBUG,"测试ngx.log接口输出的日志信息");

        -- 获取HTTP header
   	--
        -- nginx lua获取客户端真实IP
	-- https://blog.csdn.net/tangsl388/article/details/78481085
   	local headers=ngx.req.get_headers()
        local clientIp=headers["X_Forwarded_For"] or headers["X-Real-IP"] or ngx.var.remote_addr or "127.0.0.1"
        ngx.log(ngx.DEBUG,"客户端ip=" .. clientIp);

 	-- 共享内存使用参考
	-- http://www.daileinote.com/computer/openresty/11
        local success, error, forcible = ngx.shared.sharedDict:set("test-key", "Hello Dexterleslie.", 10);
	if not success then
		ngx.log(ngx.DEBUG, "无法调用sharedDict:set方法设置test-key，原因:" .. error);
	end

	-- ngx.sleep(15);
        
	local value, flags = ngx.shared.sharedDict:get("test-key");
	if value then
		ngx.log(ngx.DEBUG, "sharedDict:get(test-key)返回值:" .. value);
	else
		ngx.log(ngx.DEBUG, "sharedDict:get(test-key)没有返回值，可能key超时或者没有set");
	end
    }
    
	
    lua_shared_dict sharedDictTimeInterval 10m;
    server {
    	listen       80;
    	server_name  localhost;
	
    	location / {
       		#root   /usr/local/openresty/nginx/html;
        	#index  index.html index.htm;
 		content_by_lua_block {
			ngx.header.content_type = "text/plain";
			ngx.say("Hello Dexterleslie.");
		}
    	}

	location /timeInterval {
		content_by_lua_block {
  			ngx.header.content_type = "text/plain;charset=utf-8";
			local prevRequestTime = ngx.shared.sharedDictTimeInterval:get("prevRequestTime");
			if not prevRequestTime then
				prevRequestTime = ngx.now()*1000;
			end
			local timeNow = ngx.now()*1000;
			local timeInterval = timeNow - prevRequestTime;
			ngx.say("上次请求服务器时间间隔为:" .. timeInterval .. "毫秒");
			ngx.shared.sharedDictTimeInterval:set("prevRequestTime", timeNow);
		}
 	}

    	error_page   500 502 503 504  /50x.html;
    	location = /50x.html {
        	root   /usr/local/openresty/nginx/html;
    	}
    }
}
